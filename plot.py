import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import numpy as np
import timeit
def linearSer(n, arr):
    for i in range(len(arr)):
        if arr[i] == n:
            return i
    return -1

def binarySer(n, arr):
    low = 0
    high = len(arr)-1
    while low <= high:
        mid = (low+high)//2
        if arr[mid] == n:
            return mid
        elif arr[mid] < n:
            low = mid+1
        else:
            high = mid-1
    return -1

if __name__ == '__main__':
    list1 = np.random.choice(np.arange(1,2000), 1000, replace = False)
    list2 = np.random.choice(np.arange(1,4000), 2000, replace = False)
    list3 = np.random.choice(np.arange(1,8000), 4000, replace = False)
    list4 = np.random.choice(np.arange(1,16000), 8000, replace = False)
    list5 = np.random.choice(np.arange(1,32000), 16000, replace = False)
    list6 = np.random.choice(np.arange(1,64000), 32000, replace = False)

    list1 = np.sort(list1)
    list2 = np.sort(list2)
    list3 = np.sort(list3)
    list4 = np.sort(list4)
    list5 = np.sort(list5)
    list6 = np.sort(list6)


#Syntax for random elements generated by ChatGPT
    list1RandomElements = np.random.choice(list1, 100)
    list2RandomElements = np.random.choice(list2, 100)
    list3RandomElements = np.random.choice(list3, 100)
    list4RandomElements = np.random.choice(list4, 100)
    list5RandomElements = np.random.choice(list5, 100)
    list6RandomElements = np.random.choice(list6, 100)

    
    timeitLinList1 = []
    timeitLinList2 = []
    timeitLinList3 = []
    timeitLinList4 = []
    timeitLinList5 = []
    timeitLinList6 = []
    timeitBinList1 = []
    timeitBinList2 = []
    timeitBinList3 = []
    timeitBinList4 = []
    timeitBinList5 = []
    timeitBinList6 = []

    for i in range(100):
        timeitLinList1.append(timeit.timeit('linearSer(list1RandomElements[i], list1)', globals=globals(), number = 100))
        timeitLinList2.append(timeit.timeit('linearSer(list2RandomElements[i], list2)', globals=globals(), number = 100))
        timeitLinList3.append(timeit.timeit('linearSer(list3RandomElements[i], list3)', globals=globals(), number = 100))
        timeitLinList4.append(timeit.timeit('linearSer(list4RandomElements[i], list4)', globals=globals(), number = 100))
        timeitLinList5.append(timeit.timeit('linearSer(list5RandomElements[i], list5)', globals=globals(), number = 100))
        timeitLinList6.append(timeit.timeit('linearSer(list6RandomElements[i], list6)', globals=globals(), number = 100))
        timeitBinList1.append(timeit.timeit('binarySer(list1RandomElements[i], list1)', globals=globals(), number = 100))
        timeitBinList2.append(timeit.timeit('binarySer(list2RandomElements[i], list2)', globals=globals(), number = 100))
        timeitBinList3.append(timeit.timeit('binarySer(list3RandomElements[i], list3)', globals=globals(), number = 100))
        timeitBinList4.append(timeit.timeit('binarySer(list4RandomElements[i], list4)', globals=globals(), number = 100))
        timeitBinList5.append(timeit.timeit('binarySer(list5RandomElements[i], list5)', globals=globals(), number = 100))
        timeitBinList6.append(timeit.timeit('binarySer(list6RandomElements[i], list6)', globals=globals(), number = 100))

    timeitLin1 = sum(timeitLinList1)/len(timeitLinList1)
    timeitLin2 = sum(timeitLinList2)/len(timeitLinList2)
    timeitLin3 = sum(timeitLinList3)/len(timeitLinList3)
    timeitLin4 = sum(timeitLinList4)/len(timeitLinList4)
    timeitLin5 = sum(timeitLinList5)/len(timeitLinList5)
    timeitLin6 = sum(timeitLinList6)/len(timeitLinList6)
    timeitBin1 = sum(timeitBinList1)/len(timeitBinList1)
    timeitBin2 = sum(timeitBinList2)/len(timeitBinList2)
    timeitBin3 = sum(timeitBinList3)/len(timeitBinList3)
    timeitBin4 = sum(timeitBinList4)/len(timeitBinList4)
    timeitBin5 = sum(timeitBinList5)/len(timeitBinList5)
    timeitBin6 = sum(timeitBinList6)/len(timeitBinList6)


    list_size = [len(list1), len(list2), len(list3), len(list4), len(list5), len(list6)]
    lin_time = [timeitLin1, timeitLin2, timeitLin3, timeitLin4, timeitLin5, timeitLin6]
    bin_time = [timeitBin1, timeitBin2, timeitBin3, timeitBin4, timeitBin5, timeitBin6]

    def linear(x, a, b):
        return a * x + b
    def logarithmic(x, a, b):
        return a * np.log(x) + b
    
    popt_lin, pcov_lin = curve_fit(linear, list_size, lin_time)
    popt_bin, pcov_bin = curve_fit(logarithmic, list_size, bin_time)

    def interpolate_and_plot(list_sizes, times, popt, func, title):
        xnew = np.linspace(min(list_sizes), max(list_sizes), num=1000, endpoint=True)
        plt.plot(list_sizes, times, 'o', xnew, func(xnew, *popt), '-')
        plt.title(title)
        plt.savefig(title + '.png') 
        plt.show()

    interpolate_and_plot(list_size, bin_time, popt_bin, logarithmic, "Binary Search")
    interpolate_and_plot(list_size, lin_time, popt_lin, linear,"Linear Search")

# 1. Type of function: The linear search method is a linear function and the binary search method is a logarithmic function.
# 2. Describr the parameters. Are the results what you expected?:
# The parameters of the functions are the list size and the time it takes to search for an element in the list.
# The results are as expected. The linear search is a linear function of O(n) and binary search is a logarithmic function of O(log n)

